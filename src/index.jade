doctype html
html
  head
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    title Live code the Internet of Things

    link(rel='stylesheet', type='text/css', href='build/build.css')

  body

    article

      section
        h1 Live code the Internet of Things
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a>

      section(data-camera)
        h1 Camera Test

      section
        h1 Let's go fullscreen!

      section(data-camera="fullscreen")
        h1 You should not see this!

      section.full-imgs
        img(src="images/mqttorg.svg")

      section(data-camera)
        h2 Controlling an LCD

        form.disabled
          input#lcd(type="text")

      section(data-camera="fullscreen")

      section
        h2 MQTT
        ul
          li publish/subscribe protocol
          li multiple quality of service level..
          li ..with at-least-once and exactly-once semantics
          li low overhead (2 bytes at minimum)
          li offline messaging
          li retained messages, like a key/value store

      section
        h2 Publish-Subscribe
        img(src="images/pubsub.png", style="height: 100%")

      section
        h2 Building Robots?

        ol.bullet
          li change the real world!
          li sense the real world!

      section(data-camera)
        h2 Controlling an LCD
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient(mqttBroker);

            client.publish("mcyun/lcd", "Hello FULLSTACK!");

            client.end();

      section(data-camera="fullscreen")

      section(data-camera)
        h2 Infrared Temperature Sensor
        p
          | Ambient: &nbsp;
          span#ir-ambient.sensor-data
          | &nbsp; °C
        p
          | Object: &nbsp;
          span#ir-object.sensor-data
          | &nbsp; °C

      section(data-camera)
        h2 Temperature on LCD?
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient(mqttBroker);

            client.subscribe("sensortag/ir/ambient");

            client.on("message", function(topic, payload) {
              client.publish('mcyun/temp', payload);
            });

            setTimeout(client.end.bind(client), 3000);

      section(data-camera="fullscreen")

      section(data-bespoke-backdrop='sensortag').sensortag-slide
        h2 SensorTag
        ul.bullet
          li Bluetooth Low Energy
          li Works with your iPhone, Android or Laptop
          li It has its own node.js module!
          li works even as an iBeacon
          li 25$ shipping included..
          li by Texas Instruments

      section(data-bespoke-backdrop='sensortag', data-camera).sensortag-slide
        h2 Slide controls on LCD
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient(mqttBroker);

            client.subscribe("deck/#");

            client.on("message", function(topic, payload) {
              topic = topic.replace("deck/", "");
              client.publish('mcyun/deck', topic);
            });

            setTimeout(client.end.bind(client), 10000);

      section(data-bespoke-backdrop='sensortag', data-camera).sensortag-slide
        h1 1

      section(data-bespoke-backdrop='sensortag', data-camera).sensortag-slide
        h1 2

      section(data-bespoke-backdrop='sensortag', data-camera).sensortag-slide
        h1 3

      section(data-camera="fullscreen")

      section(data-camera="fullscreen")

      section(data-bespoke-backdrop='sensortag', data-camera).sensortag-slide
        h2 Slide control using MQTT
        ul.bullet
          li The SensorTag is connected via BLE to a node program
          li The button press events are published to topics 'deck/{next|prev}'
          li This web app is connected via MQTT over WebSocket to the MQTT broker..
          li ..and triggers the sliding API when a button is pushed!

      section(data-camera)
        h2 Plane control over MQTT!

      section(data-camera="fullscreen")

      section(data-camera).servo
        h2 Servo Control!

        p
          a.servo-cw
            i.fa.fa-large.fa-rotate-right
          | &nbsp;
          a.servo-ccw
            i.fa.fa-large.fa-rotate-left
          | &nbsp;
          a.servo-stop
            i.fa.fa-large.fa-stop

      section(data-camera="fullscreen")

      section
        h2 Button!
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient(mqttBroker);

            client.subscribe("button/press");

            client.on("message", function(topic, payload) {
              alert('pressed!')
            });

            setTimeout(client.end.bind(client), 10000);

      section
        h2 Plane Control!
        pre
          code(data-bespoke-autorun).language-javascript.
            var client = mqtt.createClient(mqttBroker);
            var rotating = false;
            client.subscribe("button/press");
            client.on("message", function() {
              if (rotating = !rotating)
                client.publish('servo/ccw', '0.5')
              else
                client.publish('servo/stop', 'true')
            });
            setTimeout(client.end.bind(client), 10000);

      section(data-camera="fullscreen")

      section
        video(src="images/plane.mov" loop)

      section
        img(src="/images/mosca.png")
        br
        h3 MQTT broker in Node.js

      section
        h2 Mosca
        ul
          li
            a(href="http://npm.im/mosca") http://npm.im/mosca
          li Standalone usage, through `$ mosca`
          li Embeddable in your app, so you can do X for every message
          li Authentication APIs
          li Supports AMQP, Mongo, Redis, and MQTT as pub/sub backends
          li Needs a DB, such as LevelDB, Mongo, or Redis
          li Support websockets
          li Fast, 10k+ messages routed per second
          li Scalable, 10k+ concurrent connections
          li Test instance available at test.mosca.io

      section.full-imgs
        img(src='images/me.png')
        h3
          a(href='http://github.com/mcollina') http://github.com/mcollina

      section
        h1 Thanks!
        br
        p If you need help with the Internet of Things
        br
        h3 <a href="mailto:hello@matteocollina.com">hello@matteocollina.com</a>
        h3 <a href="http://twitter.com/matteocollina">@matteocollina</a> on Twitter
        h3 <a href="http://www.matteocollina.com">www.matteocollina.com</a>

    script(src='build/build.js')
